package view;

/**
 * @author Wang Ruijie
 * Represents bricks that make up a box.
 * Each brick has a content (modified from the pure content), a pure content, a background color, and a font color.
 * 5 bricks are used to make up a box.
 */
public class Brick {

    // The length of the string printed generated by the toString method.
    public static int LENGTH_BRICK = 19;
    private final String pureContent;
    private String content;
    private String backgroundColor;
    private final String fontColor;

    /**
     * Used for bricks other than player bricks, because the Color string of the player tokens are too long to center.
     * @param pureContent The pure content of the brick, while content is the string to display, maybe without centering.
     * @param backgroundColor The background color of the brick.
     * @param fontColor The font color of the brick.
     */
    public Brick(String pureContent, String backgroundColor, String fontColor) {
        this.content = centerString(pureContent, LENGTH_BRICK);
        this.pureContent = pureContent;
        this.backgroundColor = backgroundColor;
        this.fontColor = fontColor;
    }

    /**
     * Used for player bricks only.
     */
    public Brick(String content, String pureContent, String backgroundColor, String fontColor) {
        this.content = content;
        this.pureContent = pureContent;
        this.backgroundColor = backgroundColor;
        this.fontColor = fontColor;
    }

    public String getContent() {
        return content;
    }

    public void setContentAsPure(String content) {
        this.content = content;
    }

    public String getBackgroundColor() {
        return backgroundColor;
    }

    public void setBackgroundColor(String backgroundColor) {
        this.backgroundColor = backgroundColor;
    }

    public String getFontColor() {
        return fontColor;
    }

    public static String centerString(String str, int length) {

        int totalPadding = length - (str.length());
        int paddingLeft = totalPadding / 2;
        return " ".repeat(paddingLeft) + str + " ".repeat(LENGTH_BRICK - str.length() - paddingLeft);
    }

    public String getPureContent() {
        return pureContent;
    }

    /**
     * Used for saving the view of a brick directly.
     * '>' is used to replace empty strings.
     */
    public String toString() {

        String contentString = (content.isEmpty()) ? ">" : content;
        String pureContentString = (pureContent.isEmpty()) ? ">" : pureContent;
        String backgroundColorString = (backgroundColor.isEmpty()) ? ">" : backgroundColor;
        String fontColorString = (fontColor.isEmpty() ) ? ">" : fontColor;

        return contentString + "," +
                pureContentString + "," +
                backgroundColorString + "," +
                fontColorString;
    }
}
